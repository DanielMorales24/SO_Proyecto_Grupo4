/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package so_proyecto_grupo4_pr;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class multicola2 extends javax.swing.JFrame {

    private Connection conectar;
    private String dbPath = "jdbc:sqlite:C:/SO_Proyecto_Grupo4_pr/SO_Proyecto.db";
    private int quantum = 2; 

    public multicola2() {
        initComponents();
        connectToDatabase();
        loadTables();
    }

    private void connectToDatabase() {
        try {
            conectar = DriverManager.getConnection(dbPath);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }

    private void loadTables() {
        try {
            if (conectar != null) {
                loadTable("SELECT * FROM multicola WHERE Prioridad = 1", altaPrioridad);
                loadTable("SELECT * FROM multicola WHERE Prioridad = 0", bajaPrioridad);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }
private void loadTable(String query, javax.swing.JTable table) throws SQLException {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);

        PreparedStatement st = conectar.prepareStatement(query);
        ResultSet result = st.executeQuery();

        while (result.next()) {
            model.addRow(new Object[]{
                result.getString("Proceso"),
                result.getInt("Prioridad"),
                result.getInt("Tiempo_Ejecucion"),
                result.getString("Tipo"),
                result.getString("Hora_llegada"),
                result.getInt("Quantum")
            });
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        startboton = new javax.swing.JButton();
        pausaboton = new javax.swing.JButton();
        addboton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        altaPrioridad = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        bajaPrioridad = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        logarea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startboton.setText("Empezar");
        startboton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startbotonActionPerformed(evt);
            }
        });

        pausaboton.setText("Pausa");
        pausaboton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pausabotonActionPerformed(evt);
            }
        });

        addboton.setText("Agregar Proceso");
        addboton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbotonActionPerformed(evt);
            }
        });

        altaPrioridad.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Proceso", "Prioridad", "Tiempo Ejecucion", "Tipo", "Hora llegada"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(altaPrioridad);

        bajaPrioridad.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Proceso", "Prioridad", "Tiempo Ejecucion", "Tipo", "Hora llegada"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(bajaPrioridad);

        logarea.setColumns(20);
        logarea.setRows(5);
        jScrollPane3.setViewportView(logarea);

        jDesktopPane1.setLayer(startboton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(pausaboton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(addboton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(pausaboton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addboton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(startboton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(76, 76, 76))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                        .addComponent(startboton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pausaboton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addboton)))
                .addContainerGap(177, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startbotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startbotonActionPerformed
        // TODO add your handling code here:
         executeProcess();
    }//GEN-LAST:event_startbotonActionPerformed

    private void pausabotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausabotonActionPerformed
        // TODO add your handling code here:
        pauseProcess();
    }//GEN-LAST:event_pausabotonActionPerformed
    
    private void updateDatabase() {
        try {
            DefaultTableModel model = (DefaultTableModel) bajaPrioridad.getModel();
            int rowCount = model.getRowCount();

            if (rowCount > 0) {
                for (int i = 0; i < rowCount; i++) {
                    Object[] rowData = new Object[model.getColumnCount()];
                    for (int j = 0; j < model.getColumnCount(); j++) {
                        rowData[j] = model.getValueAt(i, j);
                    }

                    if (rowData.length == 6) {
                        PreparedStatement pstmt = conectar.prepareStatement("INSERT INTO multicola (Proceso, Prioridad, Tiempo_Ejecucion, Tipo, Hora_llegada, Quantum) VALUES (?, ?, ?, ?, ?, ?)");
                        for (int k = 0; k < rowData.length; k++) {
                            pstmt.setObject(k + 1, rowData[k]);
                        }
                        pstmt.executeUpdate();
                    } else {
                        System.out.println("Número de columnas incorrecto en la fila " + i);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al actualizar la base de datos: " + e.getMessage());
        }
    }

    private void insertIntoDatabase(String proceso, int prioridad, int tiempoEjecucion, String tipo, String horaLlegada, int quantum) {
        try {
            if (conectar != null) {
                String query = "INSERT INTO multicola (Proceso, Prioridad, Tiempo_Ejecucion, Tipo, Hora_llegada, Quantum) VALUES (?, ?, ?, ?, ?, ?)";
                PreparedStatement pst = conectar.prepareStatement(query);
                pst.setString(1, proceso);
                pst.setInt(2, prioridad);
                pst.setInt(3, tiempoEjecucion);
                pst.setString(4, tipo);
                pst.setString(5, horaLlegada);
                pst.setInt(6, quantum);
                pst.executeUpdate();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }
    
    private void executeProcess() {
        DefaultTableModel altaModel = (DefaultTableModel) altaPrioridad.getModel();
        DefaultTableModel bajaModel = (DefaultTableModel) bajaPrioridad.getModel();
        String logText = logarea.getText();

        if (altaModel.getRowCount() > 0) {
            executeRow(altaModel, logText);
        } else if (bajaModel.getRowCount() > 0) {
            executeRow(bajaModel, logText);
        } else {
            logarea.setText("No hay procesos en las colas para iniciar.\n");
        }
    }
    
     private void executeRow(DefaultTableModel model, String logText) {
        Object[] rowData = new Object[model.getColumnCount()];
        for (int i = 0; i < model.getColumnCount(); i++) {
            rowData[i] = model.getValueAt(0, i);
        }

        int remainingTime = (int) rowData[2] - quantum;
        if (remainingTime > 0) {
            rowData[2] = remainingTime; // Actualiza el tiempo de ejecución restante
            logarea.setText(logText + "Proceso: " + rowData[0] + " ejecutado por " + quantum + " unidades de tiempo. Tiempo restante: " + remainingTime + "\n");
            model.removeRow(0);
            model.addRow(rowData); // Mover al final de la cola
        } else {
            logarea.setText(logText + "Proceso: " + rowData[0] + " completado.\n");
            model.removeRow(0); // Eliminar el proceso completado
        }
    }

    private void pauseProcess() {
        int selectedRow = altaPrioridad.getSelectedRow();
        if (selectedRow >= 0) {
            DefaultTableModel altaModel = (DefaultTableModel) altaPrioridad.getModel();
            DefaultTableModel bajaModel = (DefaultTableModel) bajaPrioridad.getModel();

            Object[] rowData = new Object[altaModel.getColumnCount()];
            for (int i = 0; i < altaModel.getColumnCount(); i++) {
                rowData[i] = altaModel.getValueAt(selectedRow, i);
            }

            bajaModel.addRow(rowData); // Mover a baja prioridad
            altaModel.removeRow(selectedRow);
            updateDatabase();
        } else {
            JOptionPane.showMessageDialog(this, "No hay procesos seleccionados para pausar.");
        }
    }
    
    private void addbotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbotonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel altaModel = (DefaultTableModel) altaPrioridad.getModel();
        altaModel.addRow(new Object[]{"Nuevo Proceso", 1, 0, "Tipo", "00:00", quantum});
        insertIntoDatabase("Nuevo Proceso", 1, 0, "Tipo", "00:00", quantum);
    }//GEN-LAST:event_addbotonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(multicola2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(multicola2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(multicola2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(multicola2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new multicola2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addboton;
    private javax.swing.JTable altaPrioridad;
    private javax.swing.JTable bajaPrioridad;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea logarea;
    private javax.swing.JButton pausaboton;
    private javax.swing.JButton startboton;
    // End of variables declaration//GEN-END:variables
}
